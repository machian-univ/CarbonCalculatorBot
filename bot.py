import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import telebot
import requests
import re
import psycopg2
from io import BytesIO
import api_requests as api
from db_config import DB_HOST, DB_PORT, DB_NAME, DB_USER, DB_PASS
from auth import TELEBOT_TOKEN

matplotlib.use('Agg')
regex_pattern = re.compile(
    r"^(?:http|ftp)s?://"
    r"(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?$)"
    r"(?::\d+)?"
    r"(?:/?|[/?]\S+)$", re.IGNORECASE)

bot = telebot.TeleBot(TELEBOT_TOKEN)
api_url = 'https://api.websitecarbon.com/site?url='
about_text = '''–ü—Ä–∏–≤–µ—Ç! –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞. –û–Ω –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö –∫–æ–º–ø–∞–Ω–∏–∏ Wholegrain Digital. –ú—ã –Ω–µ –±—É–¥–µ–º —É–≥–ª—É–±–ª—è—Ç—å—Å—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://api.websitecarbon.com/. 

–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º? –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—Å—ë –ø—Ä–æ—Å—Ç–æ!
/start - –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—ë –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.

–î–∞–ª—å—à–µ –µ—Å—Ç—å –≤—Å–µ–≥–æ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏:
üìå –ü—Ä–æ–≤–µ—Ä–∏—Ç—å - –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ, –æ—Ç –≤–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É.
üìå –†–µ–π—Ç–∏–Ω–≥ - –≤—ã–≤–æ–¥–∏—Ç 10 —Å–∞–º—ã—Ö –≥—Ä—è–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –∏–∑ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –ø—Ä–æ–≤–µ—Ä—è–ª–∏. –ü–æ –∂–µ–ª–∞–Ω–∏—é, –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö - –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞.
üìå –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç? - –≤—ã–≤–µ–¥–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ù—É —á—Ç–æ, —É–∑–Ω–∞–µ–º, –∫–∞–∫ —Å–∏–ª—å–Ω–æ –º—ã –∑–∞–≥—Ä—è–∑–Ω—è–µ–º –æ–∫—Ä—É–∂–∞—é—â—É—é —Å—Ä–µ–¥—É?'''

users_url = {}

try:
    connection = psycopg2.connect(database=DB_NAME, user=DB_USER, password=DB_PASS, host=DB_HOST, port=DB_PORT)
    cursor = connection.cursor()
    if connection.closed == 0:
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ c –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print(connection.dsn)
    else:
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
except Exception as db_connection_error:
    print(db_connection_error)


@bot.message_handler(commands=['start'])
def start(message):
    try:
        chat_id = message.chat.id
        username = message.from_user.username
        if not api.is_user_exists(cursor, chat_id):
            api.insert_user(cursor, connection, chat_id, username)

        keyboard = telebot.types.InlineKeyboardMarkup()
        button_check = telebot.types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
                                                          callback_data='check')
        button_rating = telebot.types.InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥",
                                                           callback_data='rating')
        button_about = telebot.types.InlineKeyboardButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?",
                                                          callback_data='about')
        keyboard.add(button_check)
        keyboard.add(button_rating)
        keyboard.add(button_about)

        bot.send_message(message.chat.id,
                         '–Ø –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?',
                         reply_markup=keyboard)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@bot.callback_query_handler(func=lambda call: call.data == 'check')
def save_btn(call):
    message = call.message
    chat_id = message.chat.id
    bot.edit_message_text(chat_id=chat_id, message_id=message.id,
                          text='–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
    users_url[chat_id] = {}

    bot.register_next_step_handler(message, save_url)


def is_valid_url(url, pattern=regex_pattern):
    return re.match(pattern, url) is not None


def incorrect_url(message):
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     text='–û–π, –∞ —á—Ç–æ —ç—Ç–æ —É –Ω–∞—Å? –ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å–∞–π—Çü§î –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: https://example.com')
    users_url[chat_id] = {}

    bot.register_next_step_handler(message, save_url)


def try_again(message):
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     text='–•–º–º, –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –†–∞–∑—É–º–µ–µ—Ç—Å—è, –≤–æ –≤—Å—ë–º –≤–∏–Ω–æ–≤–∞—Ç—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–º–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
    users_url[chat_id] = {}

    bot.register_next_step_handler(message, save_url)


def save_url(message):
    chat_id = message.chat.id
    input_text = message.text
    if input_text == '/start':
        start(message)
    else:
        url = input_text
        users_url[chat_id]['url'] = url
        bot.send_message(chat_id, f'–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ—Ç —Å–∞–π—Ç: {url}')
        bot.send_message(chat_id,
                         f'–í—Å—Ç–∞—Ç—å –Ω–∞ –ø—É—Ç—å —ç–∫–æ–ª–æ–≥–∏–∏ –Ω–µ–ø—Ä–æ—Å—Ç–æ - –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, –≤–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É')

        if not is_valid_url(url):
            incorrect_url(message)

        else:
            input_url = url
            url = url.replace('/', '%2F')
            url = url.replace(':', '%3A')

            url_for_check = api_url + url
            response = requests.get(url_for_check)

            if response.status_code != 200:
                try_again(message)

            else:
                info = response.json()
                cleaner_than = info["cleanerThan"] * 100
                cleaner_than = round(cleaner_than)
                rating = info["rating"]
                co2 = info["statistics"]["co2"]["grid"]["grams"]
                co2 = round(co2, 2)

                try:
                    api.insert_carbon_emission(cursor, connection, chat_id, input_url, rating, co2)
                    bot.send_message(chat_id,
                                     f'–û —É–∂–∞—Å! –ü—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏ —ç—Ç–æ—Ç —Å–∞–π—Ç –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç {co2} –≥—Ä–∞–º–º —É–≥–ª–µ–∫–∏—Å–ª–æ–≥–æ –≥–∞–∑–∞!')
                    bot.send_message(chat_id,
                                     f'–£–≥–ª–µ—Ä–æ–¥–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ {rating}. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —ç—Ç–æ—Ç —Å–∞–π—Ç —á–∏—â–µ, —á–µ–º {cleaner_than}% –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É')
                    bot.send_message(chat_id,
                                     f'–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –∑–¥–µ—Å—å: https://www.websitecarbon.com/introducing-the-website-carbon-rating-system/')
                    start(message)
                except Exception as e:
                    print(e)
                    bot.send_message(message.chat.id,
                                     '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@bot.callback_query_handler(func=lambda call: call.data == 'rating')
def rating_btn(call):
    message = call.message
    chat_id = message.chat.id
    try:
        response = api.select_top_websites(cursor, chat_id)
        if response:
            bot.edit_message_text(chat_id=chat_id, message_id=message.id,
                                  text='–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–∞–π—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¢–û–ü 10 —Å–∞–º—ã—Ö "–≥—Ä—è–∑–Ω—ã—Ö" –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤')
            show_rating_picture(chat_id, response)
            keyboard = telebot.types.InlineKeyboardMarkup()
            button_clean = telebot.types.InlineKeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å",
                                                              callback_data='clean')
            button_back = telebot.types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è",
                                                             callback_data='back')
            keyboard.add(button_clean)
            keyboard.add(button_back)
            bot.send_message(message.chat.id,
                             '–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤?',
                             reply_markup=keyboard)
        else:
            bot.edit_message_text(chat_id=chat_id, message_id=message.id,
                                  text='–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–∞–π—Ç—ã, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥!')
            bot.send_message(chat_id, text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å')
            users_url[chat_id] = {}

            bot.register_next_step_handler(message, save_url)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


def show_rating_picture(chat_id, request):
    data = {
        'url': [],
        'carbon_grams': []
    }
    for url, grams in request:
        data['url'].append(url)
        data['carbon_grams'].append(float(grams))

    df = pd.DataFrame(data)
    df_sorted = df.sort_values(by='carbon_grams', ascending=False)
    colors = plt.cm.viridis(np.linspace(0, 1, len(df_sorted)))
    plt.figure(figsize=(12, 6))
    plt.bar(df_sorted['url'], df_sorted['carbon_grams'], color=colors)
    plt.title('–¢–û–ü 10 —Å–∞–º—ã—Ö –Ω–µ—ç–∫–æ–ª–æ–≥–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤', fontsize=14)
    plt.xlabel('URL', fontsize=16)
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ—Ä–æ–¥–∞ (–≥—Ä–∞–º–º)', fontsize=14)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()

    buf = BytesIO()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤ –æ–±—ä–µ–∫—Ç BytesIO
    plt.savefig(buf, format='png')
    buf.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
    plt.close()
    bot.send_photo(chat_id=chat_id, photo=buf)


@bot.callback_query_handler(func=lambda call: call.data == 'clean')
def clean_btn(call):
    message = call.message
    chat_id = message.chat.id
    bot.edit_message_text(chat_id=chat_id, message_id=message.id,
                          text='–ß–∏—Å—Ç–∏–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤...')
    try:
        api.delete_user_history(cursor, connection, chat_id)
        bot.send_message(chat_id=chat_id,
                         text='–£—Å–ø–µ—à–Ω–æ!')
        start(message)
    except Exception as e:
        print(e)
        bot.send_message(message.chat.id,
                         '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


@bot.callback_query_handler(func=lambda call: call.data == 'about')
def about_btn(call):
    message = call.message
    chat_id = message.chat.id
    bot.edit_message_text(chat_id=chat_id, message_id=message.id,
                          text={about_text})
    start(message)


@bot.callback_query_handler(func=lambda call: call.data == 'back')
def back_to_menu(call):
    message = call.message
    bot.delete_message(message.chat.id, message_id=message.id)
    bot.answer_callback_query(call.id)
    start(message)


bot.polling(none_stop=True)
